{
  "react-native-2024": {
    "thumbnail": "https://static.toss.im/illusts-common/react-native-thumbnail.png",
    "title": "토스가 꿈꾸는 React Native 기술의 미래",
    "profile_image": "https://static.toss.im/assets/toss-tech/sojin.jpg",
    "author": "박서진",
    "position": "토스코어 Head of Frontend",
    "date": "2024. 3. 25",
    "content": "<p>안녕하세요, 토스 프론트엔드 엔지니어링 헤드 박서진입니다.</p><p>토스에서는 최고의 사용자 경험이 필요한 곳은 Native, 매일매일 실험으로 제품을 개선하는 제품은 React Native/WebView로 구성하고 있어요.</p><p>토스 프론트엔드 챕터는 지난 2022년 6월부터 React Native 기술에 투자하고 있는데요. 이번 기술 블로그 아티클에서는 왜 React Native를 고려하고 있는지, 현재 어느 정도까지 사용하고 있는지, 그리고 앞으로의 계획이 어떻게 되는지에 대해서 소개드리려고 합니다.</p><h2>왜 React Native인가</h2><p>토스는 React Native로 매끄러운 사용자 경험과 높은 개발 생산성을 제공하여, 모바일 서비스를 만드는 새로운 표준을 제시하고자 해요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/5d4c6bb2-e775-4910-963d-0431f710add8/Untitled.png' alt='image'/><p>React Native로 서비스를 개발하면, WebView로 서비스를 만들 때보다 사용자 경험을 크게 개선할 수 있어요. React Native는 기본적으로 파일 시스템에서 JavaScript 파일을 읽어오기 때문에, WebView와 다르게 네트워크로 인한 로딩 속도를 없앨 수 있기 때문이죠.</p><p> 한국처럼 대부분의 사용자가 2020년 이후에 출시한 최신 핸드폰을 쓰는 환경에서는, JavaScript 실행도 매우 빨라요. 토스에서 “매일 방문 미션” 제품을 React Native로 만들었을 때, 1초 이상의 로딩 속도를 감축시킬 수 있었어요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/559085af-1183-4187-9b2b-00591f4410bc/HermesOSSChainReact_blog_FIN_1-1_(1).gif' alt='iamge'/><p>특히 앞으로 모바일 기기 성능 발전과 더불어서 JavaScript 실행 속도는 매년 두 자릿수 퍼센티지로 빨라지고, 로딩 시간은 그만큼 계속 줄어들 것으로 보여요. <a href='https://github.com/facebook/hermes/blob/main/README.md'>Hermes 엔진</a>으로 JavaScript를 미리 컴파일하면 초기 로딩 속도를 더 빠르게 할 수도 있답니다. (사진 출처)</p><p/><p>프론트엔드 개발자의 개발 생산성도 개선할 수 있는데요.</p><div style='text-align: center;'><img src='https://static.toss.im/ipd-tcs/toss_core/live/2648fae9-0ece-432a-a427-13776ebf5780/1OkjvY4cvnTRdaY4gtCl8Fw.gif' alt='image' width='264' height='537'  /></div><p>먼저, WebView에서 생산성을 깎는 다양한 문제를 근본적으로 해결할 수 있었어요. 토스는 모바일 서비스를 WebView로 만들면서, 여러 제약이 있다는 것을 알게 되었어요. iOS에서는 display: fixed와 autoFocus 문제가 있었고, Android는 WebView 버전마다 웹 서비스가 다르게 동작하기도 했죠. History도 마음껏 수정하기 어려웠습니다. React Native는 Native 렌더러를 사용하고, 높은 자유도를 제공하기 때문에, 이 문제를 모두 깔끔히 해결할 수 있었어요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/5894b7bd-0cde-4a94-ba7e-c2ba9342939f/Untitled.png' alt='image' /><p>또한, 빌드와 배포 속도를 개선할 수 있었어요. 보통 WebView 기반으로 서비스를 만들면 빌드가 느리다는 문제에 맞닥뜨리게 되어요. SSR을 쓰는 경우 서버를 빌드하고 배포하는 시간이 필요하죠. 반면, React Native 기술에서는 배포 단계가 단순해서, 정적인 JavaScript 파일 1개만 빌드하고 업로드하면 돼요. 그래서 배포가 완료되기까지의 시간을 손쉽게 최적화할 수 있죠.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/738129ae-613c-42c6-ba76-30bc41eabc3a/Untitled.png' alt='image' /><p>마지막으로, 코드의 복잡도도 낮출 수 있었어요. 토스는 100개 넘는 Server-side rendering (SSR) 서비스를 운영하고 있는데요. SSR을 이용하면 기존의 Client-side rendering 접근보다 로딩 속도를 크게 개선하지만, Server와 Client를 넘나드는 Universal한 코드를 작성해야 해요. 두 환경을 모두 고려해야 하기 때문에, 코드의 복잡도가 크게 올라갔죠. 반면, React Native를 이용하면 Client에서 실행되는 경우만 고려하면 되었어요.</p><p>토스에서는 사용자 경험과 개발 생산성의 두 가지 가치가 제일 중요한데요. 이렇게 React Native를 이용하면 사용자에게는 더 좋은 경험을 제공하면서도, 개발 생산성도 높일 수 있겠다는 생각이 들었어요.</p>"
  },
  "docs-engineering": {
    "thumbnail": "https://static.toss.im/assets/payments/contents/payments-docu-thumb.jpg",
    "title": "더 자유롭고, 빠르고, 정확하게: 토스페이먼츠 API 문서 엔지니어링",
    "profile_image": "https://static.toss.im/3d-emojis/u1F606.png",
    "author": "한주연/신지호",
    "position": "토스페이먼츠 DX(Developer eXperience) 팀",
    "date": "2024. 3. 20",
    "content": "<p>다른 회사나 서비스에서 만든 API를 사용해 본 경험이 있으신가요? 복잡한 API를 파악하거나 새로운 업데이트를 적용하려고 할 때 설명이 정확하지 않다면 API를 적용하는 데 어려움을 겪죠. 그래서 API를 외부 개발자에게 제공할 때, 명확하고 쉽게 이해할 수 있는 문서는 필수적이에요.</p><p>토스페이먼츠는 최고의 문서 경험을 제공하기 위해 자체적인 문서 엔지니어링 시스템을 갖추고 있어요. 엔지니어링 스택으로는 MDX와 OAS(Open API Specification), 마크다운 변환 라이브러리인 remark를 사용하는데요. MDX를 사용하기 때문에 테크니컬 라이터가 다양한 컴포넌트를 사용해 자유롭게 문서를 구성할 수 있고, OAS는 API 하나를 문서에 업데이트하는데 드는 시간과 노력을 줄여줘요. remark와 결합해서 문서 내용 일부를 자동화도 해요. 그럼 지금부터 어떻게 토스페이먼츠 문서 작성이 더 자유롭고, 빠르고, 정확해졌는지 하나씩 알려드릴게요.</p><h2>더 자유롭게: MDX로 문서 구성하기</h2><p>문서의 근간은 텍스트 콘텐츠죠. 하지만 테크니컬 라이터들은 사용자가 더 이해하기 쉬운 문서로 만들기 위해 여러 가지 구성을 시도해요. 예를 들어 레이아웃을 만들어서 콘텐츠 구조를 더 보기 좋게 만들거나, 배너나 버튼으로 사용자 행동을 유도할 수 있어요. 토스페이먼츠에서는 테크니컬 라이터들이 이런 콘텐츠 구성을 자유롭게 할 수 있도록 문서 작성에 MDX(Markdown + JSX)를 사용해요. MDX는 Markdown 문서에 React 컴포넌트를 삽입할 수 있게 해주는 포맷이에요. MDX를 사용하면 React 기반의 프레임워크나 사이트에서 동적인 컴포넌트를 Markdown 문서에 쉽게 추가할 수 있죠.</p><p>토스페이먼츠 문서 중 자동결제(빌링) 이해하기 페이지를 예로 들어 볼게요. 아래 MDX 문서를 보면, #로 제목을 나타내고 ![]()로 이미지를 삽입하는 마크다운 형식을 따르고 있는데요. 중간에 <Grid>, <IconCard> 같은 컴포넌트 태그도 보이네요. <Grid>는 토스 디자인 시스템에서 제공하는 컴포넌트로 마크업 없이 그리드를 나눌 수 있게 해줘요. <IconCard>는 콘텐츠를 효과적으로 제안하는 컴포넌트로, 독자가 제안된 콘텐츠에서 기대할 수 있는 사항에 대한 설명이 들어있죠. 이런 식으로 필요한 태그를 추가하면서 문서를 자유롭게 구성할 수 있어요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/eef04f34-a56a-430c-8e09-5ef7c067df4d/1.png' alt='image' /><p>API 문서도 마찬가지예요. API 구조를 만드는 <EndpointSchema> 내부에 <EndpointSignature>, <TryApiButton> 같은 각종 컴포넌트를 추가하면 오른쪽과 같은 결과물이 나오죠. 조금 복잡해 보이지만 하나씩 살펴보면 쉬워요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/8a2753bb-a838-4be3-908d-95b1d12e9ce6/reference-structure.png' alt='image' /><p>그런데 왼쪽 MDX에 직접 작성하지 않은 파라미터 정보인 필수 여부나 데이터 타입도 오른쪽 결과 화면에 렌더되어 있네요. 작성하지 않은 파라미터 스펙이 어떻게 자동으로 나오는 걸까요?</p><h2>더 빠르게: OAS로 API 문서 생성하기</h2><p>OAS를 사용한 덕분인데요. OAS는 RESTful API의 표준 인터페이스를 설명하는 명세 방식이에요. 토스페이먼츠 API는 모두 오픈 API이기도 하고, 앞서 말한 효율화를 위해 OAS 스펙을 기반으로 구성해요. OAS는 다음과 같이 기본 정보, 태그(tag), 경로(path), 구성요소(components) 영역으로 구성되어 있어요.</p><p>기본 정보에는 Open API 버전과 서버 정보 등을, URI 정보에는 각 API의 URI와 메소드를, 컴포넌트 영역에는 스키마와 요청 바디 등의 구성요소를 정의할 수 있죠.</p><p>예를 들어 OAS가 다음과 같이 작성되어 있을 때, ‘결제 승인 API’의 엔드포인트를 찾아보면 어떤 메서드(post)이며 요청 바디는 어떻게 생겼는지(requestBody), 응답은 어떻게 돌아오는지(response) 등 API에 관련된 정보를 쉽게 확인할 수 있어요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/b8463ba6-52da-43e5-84b8-83558f2bb05c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-03-18_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.47.53.png' alt='image' /><p>이 OAS 구조를 더 적극적으로 활용하기 위해 추가한 워크플로우도 있는데요.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/8dd46fab-c79b-463a-bfa1-c6a63447eaaf/pr.png' alt='image' /><p>API 변경이나 추가로 서버 코드에 생긴 변화(예:feature/update-api)가 서버 레포지토리의 main 브랜치로 머지돼요. 그러면 GitHub Actions를 통해 문서 레포지토리에 자동으로 다음과 같은 스키마 업데이트 PR이 만들어 집니다.</p><img src='https://static.toss.im/ipd-tcs/toss_core/live/b4fb7268-671b-425d-98fe-8f01abe95681/schema-update-example.png' alt='image' /><p>이제 테크니컬 라이터가 리뷰한 새로운 API 스펙 PR을 문서 레포지토리에 머지하고 문서 콘텐츠를 준비하면 됩니다.</p><p>이 워크플로우를 활용하면 테크니컬 라이터는 어떤 엔드포인트가 추가됐는지, 해당 엔드포인트의 요청과 응답은 어떤 스키마 형태인지, 에러 코드는 무엇인지 전부 파악하고 바로 문서에 적용할 수 있어요. OAS를 사용하고, 문서에 반영되어야 하는 변경사항을 PR로 자동화함으로써 스펙 전달 및 이해를 위한 과정이 훨씬 간결해졌죠.</p>"
  },
  "toss-design-system-guide": {
    "thumbnail": "https://static.toss.im/illusts/240403-mainthumbnail.png",
    "title": "제품이 커지면 디자인 시스템 가이드는 어떻게 개선돼야 할까?",
    "profile_image": "https://static.toss.im/assets/toss-tech/heeyoung-hwang.png",
    "author": "황희영/신지호",
    "position": "토스코어 Platform Designer",
    "date": "2024. 4. 5",
    "content": "<p>300명이 넘는 개발자와 디자이너를 위한 디자인 시스템을 4명의 디자이너가 운영하고 있어요. 이 과정에서 컴포넌트의 유려함뿐만 아니라, 가이드의 효율적인 제작도 중요함을 깨달았어요. 이번 아티클에서는 TDS 컴포넌트 가이드를 제작할 때 어떤 부분들을 고려해서 만들어가고 있는지 소개해드릴게요.</p><h2>문제 </h2><p>컴포넌트를 개선하려고 할 때, 기존 가이드로는 동료 플랫폼 디자이너 및 개발자분들과 소통하기 어려웠어요. 컴포넌트 가이드 작성에 대한 규칙이 없으니 디자이너마다 작성된 방식이 제각기였고, 이 때문에 기존에 작성된 가이드를 읽는 데에도 컴포넌트를 온전히 파악하기 어려웠기 때문이에요.</p><p>컴포넌트를 개선하려고 할 때, 기존 가이드로는 동료 플랫폼 디자이너 및 개발자분들과 소통하기 어려웠어요. 컴포넌트 가이드 작성에 대한 규칙이 없으니 디자이너마다 작성된 방식이 제각기였고, 이 때문에 기존에 작성된 가이드를 읽는 데에도 컴포넌트를 온전히 파악하기 어려웠기 때문이에요.</p><p>기존 컴포넌트의 가이드에서 어떤 부분들이 문제였길래, 컴포넌트를 만드는데 메이커들이 어려움을 겪었을까요? 그리고 플랫폼 디자이너들은 이 문제들을 어떻게 해결했을까요?</p><h2>해결책</h2><h3>가이드 읽는 방향성 정하기</h3><p>기존에는 한눈에 스펙을 확인할 수 있도록 정사각형에 가까운 형태로 가이드를 배치했어요. </p><img src='https://static.toss.im/ipd-tcs/toss_core/live/670fe532-917e-43e6-9186-577fb4c1b88e/240403-tech-1.png' alt='image'/><p>각 옵션이 한 눈에 보이고, 깔끔하게 정리된 가이드를 보며, 이 완벽한 가이드만 있으면 더 이상의 커뮤니케이션은 필요 없을 줄 알았어요. 하지만 개발자분들이 이미 가이드에 정의된 스펙을 보지 못한 채 따로 요청해주시기도 하고, 컴포넌트를 구현하면서 누락된 옵션들도 종종 나타났죠.</p><p>이유를 개발자와 이야기해보니 가이드를 어떤 순서로 읽어야 하는지 파악하기 어려웠다는 걸 알게 됐어요. 그래서 어떤 구조로 컴포넌트를 만들어야 하는지 이해하기 힘들었다고 하더라고요.</p>"
  },
  "uxresearch-method": {
    "thumbnail": "https://static.toss.im/illusts/research_method_image.png",
    "title": "토스 UX 리서처는 어떤 방법론을 사용할까?",
    "profile_image": "https://static.toss.im/assets/toss-tech/heeyoung-hwang.png",
    "author": "김서연",
    "position": "토스증권 UX Researcher",
    "date": "2024. 3. 13",
    "content": "<p>UX 리서치에 관심 있는 분들과 커피챗을 하면 듣게 되는 공통적인 질문이 있어요.</p><p/><p>“토스 UX 리서처는 어떤 리서치 방법론을 쓰나요?”</p><p>“토스 UX 리서처는 리서치를 처음부터 끝까지 혼자서 하는 구조인가요?”</p><p>이 질문을 들었을 때 딱 잘라 답을 드리기 어려우면서도, 언젠간 시원하게 풀어보고 싶다는 생각이 있었어요. 이 글을 통해 토스의 UX 리서처는 어떤 방법론을 쓰는지, 리서치를 처음부터 끝까지 혼자서 도대체 어떻게 해나가는지 알려드릴게요.</p></p></p><h2>토스 UX 리서처가 쓰는 리서치 방법론 </h2><p>이 글을 읽고 계신 독자님은 어떤 방법론을 알고 계신가요?</p><p>아마도 조사방법으로는 IDI(In-Depth Interview), FGI(Focused Group Interview), UT(Usability Testing), 혹은 Diary Study가 많이 언급되는 것 같고, 분석 방법론으로는 Affinity Diagram이나 Persona도 들어보셨을 거에요. 아, User Journey Map도 자주 언급되는 것 같고요. </p><p>그 중에서 토스가 선택한 방법론은, 바로 러닝쉐어에요.</p><p>사실 UX 리서치 방법론은 취사선택하는 ‘도구’라기보다는 ‘토대’에 가깝다고 생각해요. 마치 요리사가 되었다면 기본적인 조리법을 알고 있는 것은 너무나 당연한 일인 것처럼요. 잘하는 요리사가 되려면 TPO에 따라 어떤 요리가 맞을지 잘 제시하고, 어떤 재료나 상황 속에서도 주어진 조건을 잘 활용해서 성공적인 요리를 제공해야겠죠. 그런 요리사가 있다면, 그 사람이 볶음 요리를 주로 하는지 국물 요리를 주로 하는지는 중요하지 않을 거예요.</p><p>리서치도 마찬가지로 얻고자 하는 리서치 목표가 뚜렷하고 그 목적에 맞는 결과를 얻을 수 있다면 어떤 방법론을 사용하느냐는 크게 중요한 문제가 아니더라고요. 하지만 UX 리서치 방법론을 이야기하는 아티클이나 책에서는 바로 그 리서치 목표를 어떻게 해야 잘 세우는지는 알려주지 않아요. 또 다양한 조건과 상황 속에서 어떻게 대처해야 할지도요. 그건 결국 그 리서치를 진행할 리서처가 그 케이스에 맞게 세워야 하기 때문이죠. 진리의 케바케(케이스 바이 케이스)라고나 할까요.</p><p>그렇다면 맥락에 적합한 리서치를 잘 하기 위해서는 어떤 것들을 공부해야 할까요? 다른 사람의 성공과 실패 사례, 즉 케이스 스터디만큼 확실한 방법도 없을 거예요.</p>"
  }
}
